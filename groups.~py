#-------------------------------------------------------------------------------
# Name:        Groups
# Purpose:
#
# Author:      Andy
#
# Created:     22/03/2014
# Copyright:   (c) Andy 2014
#-------------------------------------------------------------------------------

def main():
    pass

if __name__ == '__main__':
    main()



class BinaryGroup():
    def __init__(self, Domain, Operation):
        self.Domain = Domain
        self.GroupOrder = len(Domain)
        self.Operation = Operation
        Domain = self.Domain
        Operation = self.Operation
        self.identity = self.Identity()
        self.isgroup = self.GroupCheck()
        self.iscyclic = self.CyclicCheck()
        self.Orders = self.MakeOrders()
        if self.iscyclic == True:
            self.Generators = self.MakeGenerators()
        return None

    def GroupCheck(self):
        identity = False
        Domain = self.Domain
        Operation = self.Operation
        InverseCheck = self.InverseCheck
        if not(self.ClosureCheck()):
            print("Set not closed. Not a group.")
            return False
        if not(self.AssocCheck()):
            print("Not associative.")
            return False
        identity = self.Identity()
        # Identity function uses the string "False"
        # in case we have identity = the integer 0
        # which is equivalent to bool False
        if identity == "False":
            print("No identity.")
            return False
        if not(InverseCheck()):
            print("Incomplete Inverses.")
            return False
        #print(str(self.Domain)+" under "+str(self.Operation)+" Is a group!")
        return True

    def ClosureCheck(self):
        Domain = self.Domain
        Operation = self.Operation
        for n in Domain:
            for n1 in Domain:
                #Needs extra support for rotating permutations i.e. (ab) = (ba)
                isrotatedpermutation = 0
                for n2 in Domain:
                    if cycleequality(Operation(n,n1),n2):
                        isrotatedpermutation = 1
                        #print("Is rotated permutation!")

                if (Operation(n,n1) in Domain) or (isrotatedpermutation):
                    continue
                else:
                    print("Operation( "+str(n)+" , "+str(n1)+" ) = "+str(Operation(n,n1))+"  Which is not in the Domain: "+str(Domain))
                    return False
        return True

    def AssocCheck(self):
        Domain = self.Domain
        Operation = self.Operation
        for n in Domain:
            for n1 in Domain:
                for n2 in Domain:
                    a = Operation(  Operation(n,n1)  ,  n2  )
                    b = Operation(  n  ,  Operation(n1,n2)  )
                    if (a == b) or (cycleequality(a,b)):
                        return True
            #print("Passed Associativity")
        return False

    #This one returns the identity so that you can keep track of it
    #If there is no identity, it returns False
    def Identity(self):
        Domain = self.Domain
        Operation = self.Operation
        for n in Domain:
            nident = 1
            for n1 in Domain:
                if (Operation(n,n1) == n1) or (cycleequality(Operation(n,n1),n1)):
                    pass
                else:
                    nident = 0
                    print(str(n)+" is not the identity")
                    print("Operation( "+str(n)+" , "+str(n1)+ " ) = "+str(Operation(n,n1)))
                    break
            if nident == 1:
                #print("Passed Identity Check: "+str(n))
                return(n)
        # Returns string "False" because 0 is additive identity
        # and python interprets integer 0 as boolean value False
        # So we can use a string to clear up this confusion
        return "False"


    def InverseCheck(self):
        Domain = self.Domain
        Operation = self.Operation
        identity = self.identity
        for n in Domain:
            hasinverse = 0
            for n1 in Domain:
                if Operation(n,n1) == identity:
                    hasinverse = 1
                    break
                else:
                    pass
            if hasinverse == 0:
                #print("Element: "+str(n)+" \n has failed inverse check")
                return False
        #print("Inverses Exist!")
        return True
    def CyclicCheck(self):
        Domain = self.Domain
        Operation = self.Operation
        identity = self.identity
        for n in Domain:
            npower = n
            order = 1
            while npower != identity:
                npower = Operation(npower,n)
                order += 1
                #Incase order = infinity
                if order > len(Domain):
                    break
            if order == len(Domain):
                return True
        return False

    def MakeOrders(self):
        return {str(n) : self.Order(n) for n in self.Domain}
    def MakeGenerators(self):
        Generators = []
        order = self.GroupOrder
        for n in self.Domain:
            norder = self.Order(n)
            if norder == order:
                Generators.append(n)
        return Generators

    #An output of 0 means order infinity
    def Order(self, n):
        order = 1
        npower = n
        while npower != self.identity:
            npower = self.Operation(npower, n)
            order += 1
            if order > self.GroupOrder:
                return 0
        return order
    def CyclicGroup(self, n):
        cycle = []
        npower = n
        while npower not in cycle:
            cycle.append(npower)
            npower = self.Operation(npower, n)
        return cycle






class CyclicGroup():
    def __init__(self):
        return None







#Operations for testing have to be built in as python functions
def addition(a,b):
    return (a+b)
modulus = 6
def modaddition(a,b):
    return (a+b)%modulus
def multiplication(a,b):
    return (a*b)
def modmultiplication(a,b):
    return (a*b)%modulus

#Some built-in sets
zmod6 = [0,1,2,3,4,5]
zmod7 = [0,1,2,3,4,5,6]
unitsmod6 = [1,2,3,4,5]

#We can even do more abstract mappings
class mapping():
    def __init__(self,map):
        self.map = map
        self.index = -1

    def __iter__(self):
        return self

    def next(self):
        if self.index >= len(self.map)-1:
            raise StopIteration
        self.index += 1
        return self.map[self.index]

    def __getitem__(self, key):
        return self.map[key]
    def f(self,n):
        for pair in self.map:
            if pair[0] == n:
                return pair[1]
        return n

#This is map1(map2(x)), map1 composed of map 2.
def mapcomposition(map1, map2):
    unsimplifiedmap = map1[:]
    for cycles in map2:
        unsimplifiedmap.append(cycles)
    permuteset = []
    for n in unsimplifiedmap:
        for element in n:
            permuteset.append(element)
    permuteset = list(set(permuteset))
    eliminationset = permuteset[:]
    #print("Elimination set: "+str(eliminationset))
    #print(unsimplifiedmap)
    simplifiedmap = []

    for element in permuteset:
        # This next bit is a little redundant, but it helps optimize and clean bugs
        # by not re-iterating over elements that have already been processed
        # yet not altering the order of iteration over permuteset
        if element in eliminationset:
            #print(str(element)+" is in "+str(eliminationset))
            tempelement = None
            eliminationset.remove(element)
            firstloop = 1
            cycle = [element]
            while tempelement != element:
                if firstloop == 1:
                    tempelement = element
                    firstloop = 0
                #print("Tempelement: "+str(tempelement))
                counter = len(unsimplifiedmap)-1
                while counter >= 0:
                    tempelement = cyclefunc(unsimplifiedmap[counter], tempelement)
                    #print("From cyclefunc: "+str(tempelement)+"  from  "+str(unsimplifiedmap[counter]))
                    counter += -1
                #print("Tempelement after cycle: "+str(tempelement))
                if tempelement == element:
                    #print("Tempelement = element, appending cycle: "+str(cycle))
                    simplifiedmap.append(cycle)
                else:
                    cycle.append(tempelement)
                    #print(cycle)
                    #print(tempelement)
                    #print("Elimination set should have tempelement in it: "+str(eliminationset))
                    eliminationset.remove(tempelement)
                    #print("Elimination set should not have tempelement in it: "+str(eliminationset))
            # After we run through the permutation right to left, we write down the next value,
            # and loop back over to see where f(element) takes us
        else:
            #print(str(element)+" passed, not in elimination set: "+str(eliminationset))
            #print("The current simplifiedmap: "+str(simplifiedmap))
            pass
    duplicates_removed = simplifiedmap[:]
    for n in simplifiedmap:
        if len(n) == 1:
            duplicates_removed.remove(n)
    return duplicates_removed

def rotatecycle(cycle):
    rotatedcycle = cycle[:]
    for element in cycle:
        rotatedcycle[(cycle.index(element)+1) % len(cycle)] = cycle[ (cycle.index(element))]
    return rotatedcycle
def cycleequality(perm1, perm2):
    if len(perm1) != len(perm2):
        #print("Size mismatch on "+str(perm1)+" , "+str(perm2))
        return False
    rotated = perm1[:]
    for cycle in range(0,len(rotated)):
        for n in range(0,len(rotated[cycle])-1):
            rotated[cycle] = rotatecycle(rotated[cycle])
            if rotated == perm2:
                return True
    return False




def cyclefunc(cycle, element):
    if element in cycle:
        return cycle[ (cycle.index(element)+1) % len(cycle)]
    else:
        return element


# Here we'll construct D4, which is a group under
# composition of it's functions
R0 = []
R90 = [[1,2,3,4]]
R180 = [[1,3],[2,4]]
R270 = [[1,4,3,2]]
H = [[1,4],[2,3]]
V = [[1,2],[3,4]]
LD = [[1,3]]
RD = [[4,2]]

Rotational4 = [R0, R90, R180, R270]
D4 = [R0, R90, R180, R270, H, V, LD, RD]








